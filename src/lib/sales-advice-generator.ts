// AI Sales Advice Generator Service
// Generates personalized sales advice for retailers based on website analysis or manual input

import OpenAI from 'openai';
import { getSafeEnvironmentConfig } from './env';
import { 
  ProfileWebsiteAnalysis, 
  Profile, 
  RetailerSalesAdvice, 
  RetailerSalesAdviceInsert,
  SalesAdviceJob 
} from './database.types';
import { createClient } from '@supabase/supabase-js';

// Initialize OpenAI client
let openaiClient: OpenAI | null = null;

function getOpenAIClient(): OpenAI | null {
  if (!openaiClient) {
    const config = getSafeEnvironmentConfig();
    if (!config || !config.openai.apiKey || config.openai.apiKey === 'not-configured') {
      console.warn('[SALES-ADVICE] OpenAI API key not configured, using mock mode');
      return null;
    }
    
    openaiClient = new OpenAI({
      apiKey: config.openai.apiKey,
      organization: config.openai.organizationId,
    });
  }
  return openaiClient;
}

// Supabase client for service operations
const getSupabaseServiceClient = () => {
  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!, // Service role key needed for background operations
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    }
  );
};

interface SalesAdviceInput {
  profile: Profile;
  websiteAnalysis?: ProfileWebsiteAnalysis | null;
  manualBusinessSummary?: string | null;
}

interface SalesAdviceResult {
  advice: string;
  confidence: number;
  source: 'ai_analysis' | 'manual_input';
  metadata?: any;
}

/**
 * Generate AI sales advice based on business profile and analysis
 */
export async function generateSalesAdvice(input: SalesAdviceInput): Promise<SalesAdviceResult> {
  const config = getSafeEnvironmentConfig();
  const client = getOpenAIClient();
  
  // If no config or OpenAI client available, use mock implementation
  if (!config || !client) {
    return generateMockSalesAdvice(input);
  }
  
  // Determine the source of data and build prompt
  const { prompt, source, confidence } = buildPrompt(input);
  
  const startTime = Date.now();
  
  try {
    const completion = await client.chat.completions.create({
      model: config.openai.model,
      messages: [
        {
          role: "system",
          content: "Je bent een ervaren verkoopcoach voor winkeliers. Je geeft altijd praktische, toegepaste adviezen die direct bruikbaar zijn. Schrijf in een vriendelijke, professionele toon in het Nederlands."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 500, // Keep responses concise (max 250 words as requested)
      temperature: 0.7, // Balanced creativity and consistency
    });

    const advice = completion.choices[0]?.message?.content?.trim();
    
    if (!advice) {
      throw new Error('No advice generated by AI');
    }

    const processingTime = Date.now() - startTime;
    const tokensUsed = completion.usage?.total_tokens || 0;

    return {
      advice,
      confidence,
      source,
      metadata: {
        model: config.openai.model,
        tokensUsed,
        processingTimeMs: processingTime,
        promptLength: prompt.length
      }
    };

  } catch (error) {
    console.error('[SALES-ADVICE] Error generating advice:', error);
    // Fallback to mock if AI fails
    console.log('[SALES-ADVICE] Falling back to mock advice due to API error');
    return generateMockSalesAdvice(input);
  }
}

/**
 * Generate mock sales advice for development/fallback purposes
 */
function generateMockSalesAdvice(input: SalesAdviceInput): SalesAdviceResult {
  const { profile, websiteAnalysis, manualBusinessSummary } = input;
  const companyName = profile.business_name || 'uw bedrijf';
  
  let advice = `Hallo ${profile.contact_name || 'daar'}! ðŸŒŸ

Voor ${companyName} zie ik interessante mogelijkheden met Wasgeurtje:

ðŸŽ¯ **Klantbenadering**: `;

  // Add specific advice based on available data
  if (manualBusinessSummary) {
    advice += `Gezien uw bedrijfsomschrijving, kunt u Wasgeurtje positioneren als een premium toevoeging aan uw bestaande productaanbod. Benadruk de langdurige geur en eco-vriendelijke aspecten.`;
  } else if (websiteAnalysis?.business_type) {
    advice += `Als ${websiteAnalysis.business_type} kunt u Wasgeurtje presenteren als een innovatieve toevoeging die klanten zal verrassen met de langdurige geur.`;
  } else {
    advice += `Focus op de unieke waardepropositie van Wasgeurtje - dagen tot weken lang geurende was die uw klanten nog niet eerder hebben ervaren.`;
  }

  advice += `

ðŸ’¡ **Marketing tip**: Organiseer een "geur-proeverij" waar klanten verschillende geuren kunnen ruiken en direct kunnen ervaren hoe bijzonder dit product is.

ðŸ“ˆ **Verkoop strategie**: Begin met een starterpakket van 3-5 populaire geuren om te testen welke het beste aansluiten bij uw klantenkring.`;

  return {
    advice,
    confidence: 0.7,
    source: manualBusinessSummary ? 'manual_input' : (websiteAnalysis ? 'ai_analysis' : 'manual_input'),
    metadata: {
      model: 'mock-generator',
      tokensUsed: 0,
      processingTimeMs: 100,
      promptLength: 200
    }
  };
}

/**
 * Build the AI prompt based on available data
 */
function buildPrompt(input: SalesAdviceInput): { prompt: string; source: 'ai_analysis' | 'manual_input'; confidence: number } {
  const { profile, websiteAnalysis, manualBusinessSummary } = input;
  
  let businessData = '';
  let source: 'ai_analysis' | 'manual_input';
  let confidence = 0.5;

  // Prefer AI analysis over manual input if both are available
  if (websiteAnalysis && websiteAnalysis.status === 'completed' && websiteAnalysis.business_description) {
    source = 'ai_analysis';
    confidence = websiteAnalysis.confidence_score || 0.7;
    
    businessData = `
WEBSITE ANALYSE RESULTATEN:
- Bedrijfstype: ${websiteAnalysis.business_type || 'Onbekend'}
- Beschrijving: ${websiteAnalysis.business_description}
- Doelgroep: ${websiteAnalysis.target_market || 'Niet gespecificeerd'}
- Hoofdactiviteiten: ${websiteAnalysis.main_activities?.join(', ') || 'Niet gespecificeerd'}
- Kernservices: ${websiteAnalysis.key_services?.join(', ') || 'Niet gespecificeerd'}
- Locatie: ${websiteAnalysis.location || 'Niet gespecificeerd'}
- Industrie: ${websiteAnalysis.industry_category || 'Niet gespecificeerd'}
- Website: ${websiteAnalysis.website_url}`;
  } else if (manualBusinessSummary && manualBusinessSummary.trim().length > 0) {
    source = 'manual_input';
    confidence = 0.6; // Slightly lower confidence for manual input
    
    businessData = `
HANDMATIGE BEDRIJFSSAMENVATTING:
${manualBusinessSummary.trim()}`;
  } else {
    throw new Error('Geen bedrijfsgegevens beschikbaar voor het genereren van verkoopadvies');
  }

  // Add profile information if available
  let profileInfo = '';
  if (profile.business_name) {
    profileInfo += `\n- Bedrijfsnaam: ${profile.business_name}`;
  }
  if (profile.city) {
    profileInfo += `\n- Locatie: ${profile.city}`;
  }
  if (profile.contact_name) {
    profileInfo += `\n- Contactpersoon: ${profile.contact_name}`;
  }

  const prompt = `Analyseer onderstaand bedrijfsprofiel van een retailer die geurige wasparfums wil verkopen via Wasgeurtje.nl. Geef een persoonlijk verkoopadvies in maximaal 250 woorden dat aansluit op hun type klanten, locatie en activiteiten.

Beantwoord deze 3 punten:
1. Waarom Wasgeurtje goed past bij dit type winkel
2. Hoe zij onze producten het beste kunnen presenteren/vermarkten  
3. Concrete tips om hun verkoop te verhogen

BEDRIJFSINFORMATIE:${profileInfo}

${businessData}

BELANGRIJK: 
- Schrijf in een vriendelijke, professionele toon
- Geef concrete, uitvoerbare adviezen
- Gebruik maximaal 250 woorden
- Focus op praktische tips die direct toegepast kunnen worden`;

  return { prompt, source, confidence };
}

/**
 * Save generated advice to database
 */
export async function saveSalesAdvice(
  profileId: string, 
  result: SalesAdviceResult
): Promise<RetailerSalesAdvice> {
  const supabase = getSupabaseServiceClient();

  const adviceData: RetailerSalesAdviceInsert = {
    profile_id: profileId,
    source: result.source,
    advice_text: result.advice,
    status: 'completed',
    confidence_score: result.confidence,
    analysis_version: '1.0',
    advice_data: result.metadata
  };

  const { data, error } = await supabase
    .from('retailer_sales_advice')
    .insert(adviceData)
    .select()
    .single();

  if (error) {
    console.error('[SALES-ADVICE] Error saving advice:', error);
    throw new Error('Failed to save sales advice to database');
  }

  return data;
}

/**
 * Create a job record for tracking advice generation
 */
export async function createSalesAdviceJob(
  profileId: string, 
  jobType: 'generate_advice' | 'regenerate_advice' = 'generate_advice'
): Promise<SalesAdviceJob> {
  const supabase = getSupabaseServiceClient();

  const { data, error } = await supabase
    .from('sales_advice_jobs')
    .insert({
      profile_id: profileId,
      job_type: jobType,
      status: 'pending'
    })
    .select()
    .single();

  if (error) {
    console.error('[SALES-ADVICE] Error creating job:', error);
    throw new Error('Failed to create sales advice job');
  }

  return data;
}

/**
 * Update job status and completion details
 */
export async function updateSalesAdviceJob(
  jobId: string, 
  updates: {
    status?: 'pending' | 'processing' | 'completed' | 'error';
    error_message?: string | null;
    started_at?: string;
    completed_at?: string;
    processing_time_ms?: number;
    tokens_used?: number;
    result_advice_id?: string | null;
  }
): Promise<void> {
  const supabase = getSupabaseServiceClient();

  const { error } = await supabase
    .from('sales_advice_jobs')
    .update(updates)
    .eq('id', jobId);

  if (error) {
    console.error('[SALES-ADVICE] Error updating job:', error);
    throw new Error('Failed to update sales advice job');
  }
}

/**
 * Get business data for advice generation
 */
export async function getBusinessDataForAdvice(profileId: string): Promise<SalesAdviceInput> {
  const supabase = getSupabaseServiceClient();

  // Get profile data
  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', profileId)
    .single();

  if (profileError || !profile) {
    throw new Error('Profile not found');
  }

  // Get latest website analysis
  const { data: websiteAnalysis } = await supabase
    .from('profile_website_analysis')
    .select('*')
    .eq('profile_id', profileId)
    .eq('is_active', true)
    .order('analyzed_at', { ascending: false })
    .limit(1)
    .maybeSingle();

  return {
    profile,
    websiteAnalysis,
    manualBusinessSummary: profile.manual_business_summary
  };
}

/**
 * Main function to generate and save sales advice for a profile
 */
export async function generateAndSaveSalesAdvice(profileId: string): Promise<RetailerSalesAdvice> {
  const jobId = (await createSalesAdviceJob(profileId)).id;
  const startTime = new Date().toISOString();
  
  try {
    // Update job status to processing
    await updateSalesAdviceJob(jobId, { 
      status: 'processing', 
      started_at: startTime 
    });

    // Get business data
    const businessData = await getBusinessDataForAdvice(profileId);
    
    // Generate advice
    const result = await generateSalesAdvice(businessData);
    
    // Save advice
    const savedAdvice = await saveSalesAdvice(profileId, result);
    
    // Update job as completed
    const completedAt = new Date().toISOString();
    await updateSalesAdviceJob(jobId, {
      status: 'completed',
      completed_at: completedAt,
      processing_time_ms: result.metadata?.processingTimeMs,
      tokens_used: result.metadata?.tokensUsed,
      result_advice_id: savedAdvice.id
    });

    return savedAdvice;

  } catch (error) {
    // Update job as failed
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    await updateSalesAdviceJob(jobId, {
      status: 'error',
      error_message: errorMessage,
      completed_at: new Date().toISOString()
    });
    
    throw error;
  }
}

/**
 * Check if a profile needs sales advice generation
 */
export async function checkNeedsSalesAdvice(profileId: string): Promise<boolean> {
  console.log('[SALES-ADVICE] Checking needs advice for profile:', profileId);
  const supabase = getSupabaseServiceClient();

  const { data, error } = await supabase
    .rpc('needs_sales_advice_generation', { user_profile_id: profileId });

  console.log('[SALES-ADVICE] Needs advice result:', { data, error: error?.message });

  if (error) {
    console.error('[SALES-ADVICE] Error checking needs advice:', error);
    return false;
  }

  return data || false;
}

/**
 * Get latest sales advice for a profile
 */
export async function getLatestSalesAdvice(profileId: string): Promise<RetailerSalesAdvice | null> {
  console.log('[SALES-ADVICE] Getting latest advice for profile:', profileId);
  const supabase = getSupabaseServiceClient();

  const { data, error } = await supabase
    .rpc('get_latest_sales_advice', { user_profile_id: profileId });

  console.log('[SALES-ADVICE] Latest advice result:', { 
    hasData: !!data, 
    dataLength: data?.length, 
    error: error?.message,
    firstItem: data?.[0] ? 'found' : 'not found'
  });

  if (error) {
    console.error('[SALES-ADVICE] Error getting latest advice:', error);
    return null;
  }

  // Database function now returns array of objects, take first one
  return data && data.length > 0 ? data[0] : null;
}